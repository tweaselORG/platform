---
import { t } from '../../i18n/server';
import { e, client } from '../../lib/db';
import Base from '../../layouts/base.astro';
import TextRaw from '../TextRaw.astro';
import { absUrl } from '../../lib/util';
import MessageUploader from '../MessageUploader.astro';
import { calculateDeadline } from '../../lib/proceeding';
import { formatDate } from '../../lib/util';

interface Props {
    token: string;
}

const { token } = Astro.props;

const proceeding = await e
    .select(e.Proceeding, () => ({
        appName: true,
        initialAnalysis: {},
        noticeSent: true,
        uploads: { id: true, filename: true },

        filter_single: { token },
    }))
    .assert_single()
    .run(client);

if (!proceeding || !proceeding.initialAnalysis || !proceeding.noticeSent) throw new Error('This should never happen.');

const { appName } = proceeding;
const deadline = calculateDeadline(proceeding.noticeSent);
---

<Base title={t('proceeding-landing-awaitingControllerResponse', `heading`, { appName })}>
    <p>
        <TextRaw
            scope="proceeding-landing-awaitingControllerResponse"
            id="explanation"
            fields={{ appName, deadline: formatDate(deadline, { language: Astro.currentLocale }) }}
        />
    </p>

    <MessageUploader {token} />

    <h2>{t('proceeding-landing-awaitingControllerResponse', 'uploaded-messages')}</h2>
    {
        proceeding.uploads.length > 0 ? (
            <ul>
                {proceeding.uploads.map((upload) => (
                    <li>
                        <form
                            method="POST"
                            action={absUrl(`/p/${token}/upload/${upload.id}/delete`)}
                            class="delete-upload"
                            style="display: inline;"
                            data-filename={upload.filename}>
                            <button
                                type="submit"
                                class="button button-secondary button-small icon-trash"
                                title={t('proceeding-landing-awaitingControllerResponse', 'delete-upload', {
                                    filename: upload.filename,
                                })}
                            />
                        </form>
                        {upload.filename}
                    </li>
                ))}
            </ul>
        ) : (
            <em>{t('proceeding-landing-awaitingControllerResponse', 'no-messages')}</em>
        )
    }

    <hr />

    {
        proceeding.uploads.length > 0 ? (
            <>
                <>
                    <a href={absUrl(`/p/${token}/evaluate-response`)} class="button button-primary">
                        {t('proceeding-landing-awaitingControllerResponse', 'continue')}
                    </a>
                    <p>{t('proceeding-landing-awaitingControllerResponse', 'next-steps')}</p>
                </>
            </>
        ) : (
            <p>{t('proceeding-landing-awaitingControllerResponse', 'next-steps-no-uploads')}</p>
        )
    }
</Base>

<script>
    import { t } from '../../i18n/client';

    for (const form of document.querySelectorAll<HTMLFormElement>('form.delete-upload'))
        form.addEventListener('submit', (e) => {
            if (
                !confirm(
                    t('proceeding-landing-awaitingControllerResponse', 'delete-upload-confirm!', {
                        filename: form.dataset.filename || '',
                    }),
                )
            )
                e.preventDefault();
        });
</script>

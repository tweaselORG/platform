---
import { t } from '../../../../i18n/server';
import Base from '../../../../layouts/base.astro';
import { absUrl } from '../../../../lib/util';
import { e, client } from '../../../../lib/db';

const { platform, appId } = Astro.params;
if (!platform || !appId) throw new Error('This should never happen.');

if (platform !== 'android' && platform !== 'ios') return new Response('Invalid platform.', { status: 404 });

const analyses = await e
    .select(e.Analysis, (a) => ({
        id: true,
        startDate: true,
        proceeding: { appName: true },
        app: { adamId: true },

        filter: e.op(e.op(a.app.platform, '=', e.literal(e.Platform, platform)), 'and', e.op(a.app.appId, '=', appId)),
        order_by: { expression: a.startDate, direction: e.DESC },
    }))
    .run(client);

if (analyses.length === 0) return new Response('We have not analyzed this app yet.', { status: 404 });

// An app can theoretically change its name with each new version, we thus use the one we saw in the most recent proceeding.
const name = analyses[0]!.proceeding.appName;
// On iOS, we need the adamId for getAppMeta().
const adamId = analyses[0]!.app.adamId;
---

<Base title={t('app-details', 'heading', { name, platform: t('common', platform) })}>
    <h2>{t('app-details', 'analyses')}</h2>

    <ul>
        {
            analyses.map((a) => (
                <li>
                    <a href={absUrl(`/a/${platform}/${appId}/${a.id}`)}>{a.startDate}</a>
                </li>
            ))
        }
    </ul>

    <a
        class="button button-secondary"
        href={absUrl(`/p/${platform}/${platform === 'android' ? appId : adamId}/confirm-platform`)}>
        {t('app-details', 'analyse-again')}
    </a>
</Base>

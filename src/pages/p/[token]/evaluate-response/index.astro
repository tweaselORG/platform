---
import { t } from '../../../../i18n/server';
import Base from '../../../../layouts/base.astro';
import { absUrl, formatDate } from '../../../../lib/util';
import { e, client } from '../../../../lib/db';
import { calculateDeadline } from '../../../../lib/proceeding';

const { token } = Astro.params;

if (!token) throw new Error('This should never happen.');

const proceeding = await e
    .select(e.Proceeding, () => ({
        state: true,
        noticeSent: true,
        uploads: { id: true },

        filter_single: { token },
    }))
    .assert_single()
    .run(client);

if (proceeding?.state !== 'awaitingControllerResponse' || !proceeding.noticeSent || proceeding.uploads.length === 0)
    return new Response('You cannot evaluate the response to this proceeding now.', { status: 400 });

const deadline = calculateDeadline(proceeding.noticeSent);
const deadlineExpired = new Date() > deadline;
const deadlineFormatted = formatDate(deadline, { language: Astro.currentLocale, includeTime: true });
---

<Base title={t('evaluate-response', 'heading')}>
    <p>{t('evaluate-response', 'explanation')}</p>

    {!deadlineExpired && <p>{t('evaluate-response', 'explanation-deadline', { deadline: deadlineFormatted })}</p>}

    <div class="col75 col100-mobile">
        {
            (['promise', 'denial', 'none'] as const).map((r) => (
                <form class="button-list-vertical" method="POST" action={absUrl(`/p/${token}/evaluate-response/${r}`)}>
                    {r === 'none' && !deadlineExpired ? (
                        <div class="button-with-addon-group">
                            <button type="submit" class="button button-secondary disabled" disabled>
                                {t('evaluate-response', `reponse-${r}`)}
                            </button>

                            <details class="footnote">
                                <summary
                                    class="button button-secondary button-addon icon-question-mark"
                                    title={t('evaluate-response', 'why-not-yet')}
                                />
                                <div class="footnote-content">
                                    {t('evaluate-response', 'why-not-yet-explanation', { deadline: deadlineFormatted })}
                                </div>
                            </details>
                        </div>
                    ) : (
                        <button type="submit" class="button button-secondary">
                            {t('evaluate-response', `reponse-${r}`)}
                        </button>
                    )}
                </form>
            ))
        }
    </div>
</Base>

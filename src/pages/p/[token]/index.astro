---
import { e, client } from '../../../lib/db';
import { isValidProceedingState } from '../../../lib/typeguard';
import NeedsInitialAnalysis from '../../../components/ProceedingLandingPage/NeedsInitialAnalysis.astro';
import InitialAnalysisFoundNothing from '../../../components/ProceedingLandingPage/InitialAnalysisFoundNothing.astro';

const { token } = Astro.params;
if (!token) throw new Error('This should never happen.');

const proceeding = await e
    .select(e.Proceeding, (p) => ({
        state: true,

        filter: e.op(p.token, '=', token),
    }))
    .assert_single()
    .run(client);

if (!proceeding) return new Response('Invalid token.', { status: 403 });

const state = proceeding.state;
if (!isValidProceedingState(state)) throw new Error('This should never happen.');
---

{
    state === 'needsInitialAnalysis' ? (
        <NeedsInitialAnalysis />
    ) : state === 'initialAnalysisFoundNothing' ? (
        <InitialAnalysisFoundNothing token={token} />
    ) : (
        ''
    )
}

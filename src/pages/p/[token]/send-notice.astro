---
import { t } from '../../../i18n/server';
import { e, client } from '../../../lib/db';
import Base from '../../../layouts/base.astro';
import TextRaw from '../../../components/TextRaw.astro';
import { absUrl } from '../../../lib/util';
import MessageUploader from '../../../components/MessageUploader.astro';

const { token } = Astro.params;
if (!token) throw new Error('This should never happen.');

const proceeding = await e
    .select(e.Proceeding, () => ({
        app: {
            appId: true,
            platform: true,
        },

        appName: true,
        developerEmail: true,
        privacyPolicyUrl: true,

        state: true,

        filter_single: { token },
    }))
    .assert_single()
    .run(client);

if (!proceeding) return new Response('Invalid token.', { status: 403 });

if (proceeding.state !== 'awaitingControllerNotice')
    return new Response(
        'You cannot send a notice to the developer regarding this proceeding yet or you have already sent it.',
        { status: 400 },
    );

const recipientEmail = proceeding.developerEmail;
const privacyPolicyUrl = proceeding.privacyPolicyUrl;

const fields = {
    platform: t('common', proceeding.app.platform),
    appName: proceeding.appName,
    appId: proceeding.app.appId,
};
---

<Base title={t('send-notice', 'heading')}>
    <p>{t('send-notice', 'intro')}</p>

    <div class="box box-warning">{t('send-notice', 'attachment-note')}</div>

    <div class="form-group">
        <strong><label for="recipient-input">{t('send-notice', 'recipient')}</label></strong><br />
        {
            !privacyPolicyUrl ? (
                t('send-notice', 'find-recipient-no-pp')
            ) : recipientEmail ? (
                <>
                    <input type="email" id="recipient-input" class="form-element" readonly value={recipientEmail} />
                    <TextRaw scope="send-notice" id="verify-recipient" fields={{ privacyPolicyUrl }} />
                </>
            ) : (
                <TextRaw scope="send-notice" id="find-recipient" fields={{ privacyPolicyUrl }} />
            )
        }<br />

        <strong><label for="subject-input">{t('send-notice', 'subject')}</label></strong>
        <input
            type="text"
            id="subject-input"
            class="form-element"
            readonly
            value={t('send-notice', 'template-subject', fields)}
        /><br />

        <strong>{t('send-notice', 'attachments')}</strong>
        <ul>
            <li><a href={absUrl(`/p/${token}/attachment/notice`)}>{t('send-notice', 'notice')}</a></li>
            <li>
                <a href={absUrl(`/p/${token}/attachment/initial-report`)}>{t('send-notice', 'technical-report')}</a>
            </li>
            <li><a href={absUrl(`/p/${token}/attachment/initial-har`)}>{t('send-notice', 'traffic-recording')}</a></li>
        </ul>

        <strong><label for="body-input">{t('send-notice', 'text')}</label></strong>
        <textarea
            id="body-input"
            class="form-element"
            rows="11"
            readonly
            set:text={t('send-notice', 'template-text', fields)}
        />

        <a href={`mailto:${recipientEmail || ''}`} class="button button-primary">
            {t('send-notice', 'open-email-program')}
        </a>
    </div>

    <hr />

    <h2>{t('send-notice', 'upload-heading')}</h2>

    <p>{t('send-notice', 'upload-explanation')}</p>

    <MessageUploader {token} uploadButtonMessage="upload-and-continue" />
</Base>

<script>
    let previousActiveElement: HTMLElement | null;

    const onInputClick = function (e: MouseEvent) {
        const target = e.target as HTMLInputElement | HTMLTextAreaElement | null;

        if (!target || previousActiveElement === target) return;

        target.select();
        target.focus();

        previousActiveElement = target;
    };

    for (const el of ['recipient-input', 'subject-input', 'body-input'])
        document.getElementById(el)?.addEventListener('click', onInputClick);
</script>

<style>
    ul {
        margin: 0;
    }

    .button-primary {
        margin-top: 1em;
    }
</style>
